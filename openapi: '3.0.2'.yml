openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
  description: "Sources: https://restfulapi.net/resource-naming/"
servers:
  - url: https://api.server.test/v1


tags:
  - name: game
    description: Everything about getting, posting, deleting games
paths:
  /game/userID/{userID}:
    get:
      tags:
        - game
      summary: Returns all games based on the {userID} and filters on the query parameters
      parameters:
        - name: userID
          in: path
          description: the id of the user
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum:
              - won
              - lost
              - draw
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/arrayOfGames'
          '404':
            description: User Not Found
          '400':
            description: Invalid Query
  /game/gameID/{gameID}:
    get:
      tags:
        - game
      summary: Return a specific game based on {gameID}
      parameters:
        - name: gameID
          in: path
          description: the id of the game
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/singleGame'
    delete:
      tags:
        - game
      summary: Delete a specific game based on {gameID}
      parameters:
        - name: gameID
          in: path
          description: the id of the game
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Game Not Found




























  # /games/:
  #   get:
  #     tags:
  #       - game
  #     summary: Returns all games
  #     description: Returns all games that have happend
  #     parameters:
  #     - in: query
  #       name: filter
  #       schema:
  #         type: string
  #         enum:
  #           - won
  #           - lost
  #           - draw
  #       description: Filter by games that have been won, lost or draw
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/arrayOfGames'
  #       '404':
  #         description: ID Not Found
  #       '400':
  #         description: Query parameter is not valid
  #   post:
  #     tags:
  #       - game
  #     summary: Create a new game
  #     description: Creates a new game and returns the ID
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             properties:
  #               mode:
  #                 type: string
  #                 example:
  #                   "1v1"
  #               winner:
  #                 type: integer
  #                 description: ID of the winning player
  #                 example:
  #                   16379
  #               loser:
  #                 type: integer
  #                 description: ID of the losing player
  #                 example:
  #                   12092
  #               winnerScore:
  #                 type: integer
  #                 example:
  #                   8
  #               loserScore:
  #                 type: integer
  #                 example:
  #                   5
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               properties:
  #                 id:
  #                   type: number
  #                   example:
  #                     42
  #       '400':
  #         description: Invalid request body
  # /game/userID/{userID}:
  #   get:
  #     tags:
  #       - game
  #     summary: 'lists all games of a user'
  #     parameters:
  #     - name: userID
  #       in: path
  #       description: the id of the user
  #       required: true
  #       schema:
  #         type: integer
  #     - in: query
  #       name: filter
  #       schema:
  #         type: string
  #         enum:
  #           - won
  #           - lost
  #           - draw
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/arrayOfGames'
  #       '404':
  #         description: ID Not Found
  #       '400':
  #         description: Query parameter is not valid
  # /game/gameID/{gameID}:
  #   get:
  #     tags:
  #       - game
  #     summary: 'list a specific game'
  #     parameters:
  #     - name: gameID
  #       in: path
  #       description: the id of the game
  #       required: true
  #       schema:
  #         type: integer
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/singleGame'
  #       '404':
  #         description: ID Not Found
  #       '400':
  #         description: Bad Request
  #   delete:
  #     tags:
  #       - game
  #     summary: 'delete a specific game'
  #     parameters:
  #     - name: gameID
  #       in: path
  #       description: the id of the game
  #       required: true
  #       schema:
  #         type: integer
  #     responses:
  #       '200':
  #         description: OK
  #       '404':
  #         description: ID Not Found
  #       '400':
  #         description: Bad Request
components:
  schemas:
    singleGame:
      type: object
      properties:
        id:
          type: number
          example:
            25
        mode:
          type: string
          example:
            "1v1"
        winner:
          type: integer
          description: ID of the winning player
          example:
            16379
        loser:
          type: integer
          description: ID of the losing player
          example:
            12092
        winnerScore:
          type: integer
          example:
            8
        loserScore:
          type: integer
          example:
            5
        date:
          type: string
          example:
            1668172775
    arrayOfGames:
      type: array
      items:
        $ref: '#/components/schemas/singleGame'




    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatar:
          type: string
        membership:
          $ref: '#/components/schemas/Membership'
        level:
          type: integer
          minimum: 0
          default: 0
        wins:
          type: integer
          minimum: 0
          default: 0
        loses:
          type: integer
          minimum: 0
          default: 0
        twofa:
          type: boolean
          default: false
        games_won:
          $ref: '#/components/schemas/GameHistory'
        games_lost:
          $ref: '#/components/schemas/GameHistory'
        sentFriendRequests:
          type:  array
          items:
            $ref: '#/components/schemas/User'
        receivedFriendRequests:
          type:  array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date
    UserRole:
      type: string
      enum:
        - owner
        - admin
        - user
      default:
        - user
    Membership:
      type: object
      properties:
        id:
          type: number
        user:
          $ref: '#/components/schemas/User'
        role:
          type: string
          $ref: '#/components/schemas/UserRole'
        banned:
          type: boolean
          default: false
        muted:
          type: boolean
          default: false
    Friend:
      type: object
      properties:
        id:
          type: number
        sender:
          $ref: '#/components/schemas/User'
        reciever:
          $ref: '#/components/schemas/User'
        status:
          type: string
          default: pending
        createdOn:
          type: string
          format: date
    GameHistory:
      type: object
      properties:
        id:
          type: number
        mode:
          type: string
        winner:
          $ref: '#/components/schemas/User'
        loser:
          $ref: '#/components/schemas/User'
        draw:
          type: boolean
          default: false
        winnerScore:
          type: integer
          default: 0
        loserScore:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date